# -*- coding: utf-8 -*-
"""Medallion_architrcture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LsGFy8qouVxycvolW40VuDjh5VmQE9bb
"""

pip install cassandra-driver

import json
import csv
import requests
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from uuid import uuid4
from io import StringIO

# Cloud configuration for connecting to Astra
cloud_config = {
    'secure_connect_bundle': 'secure-connect-sudhir.zip'
}

with open("Sudhir-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)

# Connect to Astra Database
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()


if session:
    print("Connection is active")
else:
    print("Connection is not active")

import csv
from uuid import uuid4
from datetime import datetime

session.set_keyspace('sampledb')

# Step 1: Create the Bronze Table
create_table_query = """
CREATE TABLE IF NOT EXISTS bronze_table (
    region TEXT,
    country TEXT,
    item_type TEXT,
    sales_channel TEXT,
    order_priority TEXT,
    order_date TEXT,
    order_id UUID PRIMARY KEY,
    ship_date TEXT,
    units_sold INT,
    unit_price DECIMAL,
    unit_cost DECIMAL,
    total_revenue DECIMAL,
    total_cost DECIMAL,
    total_profit DECIMAL
);
"""
session.execute(create_table_query)
print("Bronze table created successfully.")

# Step 2: Load Data from Local CSV and Insert into the Bronze Table
csv_file_path = "sales_100.csv"


# Insert data from CSV into the Bronze table
def insert_data_from_csv(file_path):
    with open(file_path, "r") as file:
        reader = csv.DictReader(file)

        insert_query = """
        INSERT INTO bronze_table (
            region, country, item_type, sales_channel, order_priority,
            order_date, order_id, ship_date, units_sold, unit_price,
            unit_cost, total_revenue, total_cost, total_profit
        ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);
        """

        for row in reader:
            try:
                session.execute(insert_query, (
                    row["Region"],
                    row["Country"],
                    row["Item Type"],
                    row["Sales Channel"],
                    row["Order Priority"],
                    row["Order Date"],
                    uuid4(),
                    row["Ship Date"],
                    int(row["UnitsSold"]),
                    float(row["UnitPrice"]),
                    float(row["UnitCost"]),
                    float(row["TotalRevenue"]),
                    float(row["TotalCost"]),
                    float(row["TotalProfit"])
                ))

# Call the function
insert_data_from_csv(csv_file_path)
print("Data inserted into the Bronze table successfully.")

# Step 1: Create the Silver Table
create_silver_table_query = """
CREATE TABLE IF NOT EXISTS silver_table (
    region TEXT,
    country TEXT,
    item_type TEXT,
    sales_channel TEXT,
    order_priority TEXT,
    order_id UUID PRIMARY KEY,
    units_sold INT,
    unit_price DECIMAL,
    unit_cost DECIMAL,
    total_revenue DECIMAL,
    total_cost DECIMAL,
    total_profit DECIMAL
);
"""
session.execute(create_silver_table_query)
print("Silver table created successfully.")



select_bronze_query = "SELECT * FROM bronze_table;"
rows = session.execute(select_bronze_query)
insert_silver_query = """
INSERT INTO silver_table (
    region, country, item_type, sales_channel, order_priority,
    order_id, units_sold, unit_price, unit_cost,
    total_revenue, total_cost, total_profit
) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
"""
for row in rows:
    try:
        session.execute(insert_silver_query, (
            row.region, row.country, row.item_type, row.sales_channel, row.order_priority,
            row.order_id, row.units_sold, row.unit_price, row.unit_cost,
            row.total_revenue, row.total_cost, row.total_profit
        ))
        print(f"Inserted data for order_id: {row.order_id} into Silver table.")
    except Exception as e:
        print(f"Error inserting data into Silver table: {e}")

# Create Gold Table 1
create_gold_table1 = """
CREATE TABLE IF NOT EXISTS sampledb.gold_table1 (
    country TEXT PRIMARY KEY,
    total_profit DECIMAL
);
"""
session.execute(create_gold_table1)
print("Gold Table 1 created successfully.")

# Create Gold Table 2
create_gold_table2 = """
CREATE TABLE IF NOT EXISTS sampledb.gold_table2 (
    item_type TEXT PRIMARY KEY,
    total_revenue DECIMAL
);
"""
session.execute(create_gold_table2)
print("Gold Table 2 created successfully.")

# Create Gold Table 3
create_gold_table3 = """
CREATE TABLE IF NOT EXISTS sampledb.gold_table3 (
    region TEXT PRIMARY KEY,
    total_cost DECIMAL
);
"""
session.execute(create_gold_table3)
print("Gold Table 3 created successfully.")

def populate_gold_table1():
    try:

        session.set_keyspace('sampledb')

        query = "SELECT country, total_profit FROM silver_table;"
        rows = session.execute(query)

        insert_query = """
        INSERT INTO gold_table1 (country, total_profit)
        VALUES (%s, %s);
        """
        for row in rows:
            session.execute(insert_query, (row.country, row.total_profit))

        print("Gold table 1 populated successfully.")

    except Exception as e:
        print(f"Error populating Gold table 1: {e}")

# Call the function
populate_gold_table1()

def populate_gold_table2():
    try:

        session.set_keyspace('sampledb')


        query = "SELECT item_type, total_revenue FROM silver_table;"
        rows = session.execute(query)

        insert_query = """
        INSERT INTO gold_table2 (item_type, total_revenue)
        VALUES (%s, %s);
        """


        for row in rows:
            session.execute(insert_query, (row.item_type, row.total_revenue))

        print("Gold table 2 populated successfully.")

    except Exception as e:
        print(f"Error populating Gold table 2: {e}")

# Call the function to populate gold_table2
populate_gold_table2()

def populate_gold_table3():
    try:

        session.set_keyspace('sampledb')


        query = "SELECT region, total_cost FROM silver_table;"
        rows = session.execute(query)


        insert_query = """
        INSERT INTO gold_table3 (region, total_cost)
        VALUES (%s, %s);
        """


        for row in rows:
            session.execute(insert_query, (row.region, row.total_cost))

        print("Gold table 3 populated successfully.")

    except Exception as e:
        print(f"Error populating Gold table 3: {e}")

# Call the function
populate_gold_table3()